# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def isPalindrome(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
# 如果链表为空或只有一个节点
    if not head or not head.next:
        return True
    
    # 如果链表只有两个节点
    if head.next.next is None:
        if head.val != head.next.val:
            return False
    stack = []      # 模拟栈
    slow = head     # 慢指针
    fast = head     # 快指针
    
    # 循环找到链表中点
    while fast.next and fast.next.next:
        stack.append(slow.val)
        slow = slow.next
        fast = fast.next.next
    stack.append(slow.val)
    slow = slow.next    # 从中点的下一个节点开始比较
    
    # 如果链表长度为奇数，需要先弹出栈顶元素，从次顶元素开始比较
    if fast.next is None:
        stack.pop()
    
    # 只要stack里面还有元素，就一直比较
    while stack:
        if slow.val != stack.pop():
            return False
        slow = slow.next
    return True
