#先序遍历两个树，生成两个字符串，判断一个字符串是不是另一个字符串的子串

# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def isSubtree(self, s, t):
        """
        :type s: TreeNode
        :type t: TreeNode
        :rtype: bool
        """
        ss = self.inorder(s)
        st = self.inorder(t)
        print(st,ss)
        return st in ss
        
    def inorder(self,root):
        if not root:
            return '#'
        return '*'+str(root.val)+self.inorder(root.left)+self.inorder(root.right)
        # *是为了防止两个数个位数相同（比如：2，12）造成的误判，因此用一个符合标记数字开头
