字符串的乘法也可以由列竖式计算的方法得到：
让num1 依次乘上 num2 的每一位的和
把第一步里得到的所有和累加在一起，就可以得到 num1 * num2 的结果。

class Solution(object):
    def multiply(self, num1, num2):
        """
        :type num1: str
        :type num2: str
        :rtype: str
        """
        if num1 == "0" or num2 == "0": #处理特殊情况
            return "0"
        
        l1, l2 = len(num1), len(num2) 
        if l1 < l2: 
            num1, num2 = num2, num1 #保障num1始终比num2长， 个人习惯
            l1, l2 = l2, l1
            
        num2 = num2[::-1] #注意要倒过来乘，方便进位
        res = "0"
        for i, digit in enumerate(num2):
            tmp = self.StringMultiplyDigit(num1, int(digit)) + "0" * i #计算num1和num2的当前位的乘积
            res = self.StringPlusString(res, tmp) #计算res和tmp的和

        return res

