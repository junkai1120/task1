使用动态规划算法，偷到第i个房屋可能是跨过了前面两个房屋（第i-3个），也可能是跨过了前面一个房屋（第i-2个）。dp[i]表示偷完第i个房屋持有的总现金，nums[i]表示第i个房屋内的现金，公式就是：

dp[i] = max(dp[i-2]+nums[i], dp[i-3]+nums[i])
然后就是初始化dp数组的问题。dp[0]自然就是偷第一个房屋的现金数，没有什么好选择的，因此dp[0] = nums[0]，同理dp[1] = nums[1]。而偷到第三个房屋只能是偷完第一个房屋过来，所以dp[2] = nums[0] + nums[2]。 最后在返回结果时要注意，因为偷最后一个房屋和偷倒数第二个房屋肯定是不一样的偷法，不知道哪种偷的更多，因此直接返回最大值即可。

class Solution:
    def rob(self, nums: List[int]) -> int:
        n = len(nums)
        if n == 0:
            return 0
        if n <= 2:
            return max(nums)
        i = 3
        dp = [nums[0]] + [nums[1]] + [nums[0] + nums[2]] + [0] * (n-3)
        while i < n:
            dp[i] = max(dp[i-2]+nums[i], dp[i-3]+nums[i])
            i += 1
        return max(dp)
