#通过使用具有 不同速度 的快、慢两个指针遍历链表，慢指针每次移动一步，而快指针每次移动两步。
#如果列表中不存在环，最终快指针将会最先到达尾部，此时我们可以返回 false。
#现在考虑一个环形链表，把慢指针和快指针想象成两个在环形赛道上跑步的运动员（分别称之为慢跑者与快跑者）。而快跑者最终一定会追上慢跑者。终止条件是快指针指向None或者快慢指针相等
class Solution(object):
    def hasCycle(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
        if head == None:
            return False
        p = head
        q = head
        
        while q:
            if q.next ==None:
                return False
            else:
                p = p.next
                q = q.next.next
                
            if p==q:
                return True
        return False
